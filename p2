#!ruby
unescape = %w[a b].map { _1.encode('utf-16be') }
unre = Regexp.union unescape
p unre =~ 'a'.encode('')
# src = unre.source#.force_encoding 'utf-16be'
p unre
Regexp.new(unre)
# $unescape_regex = Regexp.new(Regexp.union($unescape_regex).source.force_encoding($encoding), Regexp::FIXEDENCODING)
# $escape_regex = Regexp.new(Regexp.union($escape_regex).source.force_encoding($encoding), Regexp::FIXEDENCODING)

__END__
$pictures = $c_escapes=1
puts <<~RUBY
def escape(char)
  case char
  #{$c_escapes ? <<~'C_ESCAPES' : ''}
  when "\0" then '\0'
  when "\a" then '\a'
  when "\b" then '\b'
  when "\t" then '\t'
  when "\n" then '\n'
  when "\v" then '\v'
  when "\f" then '\f'
  when "\r" then '\r'
  when "\e" then '\e'
  C_ESCAPES
  #{$pictures ? <<~'PICTURES' : ''}
  when "\x00"..."\x20" then (0x2400 + char.ord).chr(Encoding::UTF_8)
  when "\x7F"          then "\u{2421}"
  when " "             then "\u{2423}"
  PICTURES
  end
end
RUBY

__END__

## Escape the lower control characters (i.e. \x00..\x1F and \x7F) with their hex escapes. Note that
# some of these escapes escapes may be overwritten below by user options (like `--c-escapes`).
[*"\0".."\x1F", "\x7F"].each do |char|
  CHARACTERS[char] = visualize escape_bytes(char)
end

## Add in normal ASCII printable characters (i.e. \x20..\x7E).
(' '..'~').each do |char|
  CHARACTERS[char] = char
end

## Escape the high-bit characters (i.e. \x80..\xFF) when we're outputting binary data, because the
# high-bit characters are technically valid (ie `"\x80".force_encoding("binary").valid_encoding?` is
# true), so our logic later on would print them out verbatim.
if $encoding == Encoding::BINARY
  ("\x80".."\xFF").each do |char|
    CHARACTERS[char] = visualize escape_bytes(char)
  end
end

################################################################################
#                                 Apply Flags                                  #
################################################################################

## If the control pictures were requested, then print out visualizations of the control characters
# instead of whatever else.
if $pictures
  (0x00...0x20).each do |byte|
    CHARACTERS[byte.chr] = visualize((0x2400 + byte).chr(Encoding::UTF_8))
  end

  CHARACTERS["\x7F"] = visualize "\u{2421}"
  CHARACTERS[" "] = visualize "\u{2423}"
end

## If C-Style escapes were specified, then change a subset of the control characters to use the
# alternative syntax instead of their hex escapes.
if $c_escapes
  CHARACTERS["\0"] = visualize '\0'
  CHARACTERS["\a"] = visualize '\a'
  CHARACTERS["\b"] = visualize '\b'
  CHARACTERS["\t"] = visualize '\t'
  CHARACTERS["\n"] = visualize '\n'
  CHARACTERS["\v"] = visualize '\v'
  CHARACTERS["\f"] = visualize '\f'
  CHARACTERS["\r"] = visualize '\r'
  CHARACTERS["\e"] = visualize '\e'
end

## Individual character escapes
# CHARACTERS["\n"] = "\n" unless $escape_newline
CHARACTERS["\t"] = "\t" unless $escape_tab
CHARACTERS['\\'] = visualize('\\\\') if $escape_backslash
CHARACTERS[' ']  = visualize($space_picture ? '␣' : ' ') if $escape_spaces
